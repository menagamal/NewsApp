//
//  ArticlesInteractor.swift
//  NewsApp
//
//  Created Mena Gamal on 12/15/20.
//  Copyright © 2020 Mena Gamal. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Moya

class ArticlesInteractor: BaseInteractor<AppTarget>,ArticlesInteractorInputProtocol {
    
    
    
    
    weak var presenter: ArticlesInteractorOutputProtocol?
    
    var requestProvider = MoyaProvider<AppTarget>(callbackQueue: DispatchQueue.global(qos: .utility))
    
    private var articles = [Articles]()
    
    private var searchedArticles = [Articles]()
    
    func loadArticles() {
        
        requestProvider.request(.articles) { result in
            switch(result) {
            case .success(let response):
                DispatchQueue.main.async {
                    do {
                        if response.statusCode == BaseConstant.Codes.success.rawValue {
                            let responseModel: ArticlesResponse = try response.map(ArticlesResponse.self)
                            if let presenter = self.presenter , let articles = responseModel.articles {
                                //presenter.didFetchArticles(articles: self.sortArticlesByDates(articles: articles))
                                self.articles = self.sortArticlesByDates(articles: articles)
                                presenter.didFetchArticles()
                            } else {
                                self.presenter?.didFailFetchArticles()
                            }
                            
                            
                        } else {
                            self.presenter?.didFailFetchArticles()
                        }
                    } catch{
                        self.presenter?.didFailFetchArticles()
                    }
                }
            case .failure(_):
                DispatchQueue.main.async {
                    self.presenter?.didFailFetchArticles()
                }
            }
            
            
        }
        
        
        
    }
    func searchArticles(str: String) {
        self.searchedArticles.removeAll()
        if str.isEmpty {
            self.searchedArticles = articles
        } else {
            for item  in articles {
                if let title = item.title{
                    if title.contains(str) {
                        self.searchedArticles.append(item)
                    }
                }
            }
            
        }
        self.presenter?.didSearchArticles()
    }
    
    func getArticles() -> [Articles] {
        return self.articles
    }
    func getSearched() -> [Articles]  {
        return self.searchedArticles
    }
    
    private func sortArticlesByDates(articles:[Articles]) -> [Articles]{
        return articles.sorted(by: { $0.publishedAtDate > $1.publishedAtDate })
    }
    
    
}
