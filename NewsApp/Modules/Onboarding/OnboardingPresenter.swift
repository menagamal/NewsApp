//
//  OnboardingPresenter.swift
//  NewsApp
//
//  Created Mena Gamal on 12/14/20.
//  Copyright © 2020 Mena Gamal. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class OnboardingPresenter: BasePresenter,OnboardingPresenterProtocol {
    
    
    weak internal var view: OnboardingViewProtocol?
    
    var interactor: OnboardingInteractorInputProtocol?
    
    private let router: OnboardingRouterProtocol
    
    private var state: OnboardingState = .Country
    
    private var dataSource: LabelCollectionViewDataSource?
    
    init(view: OnboardingViewProtocol, interactor: OnboardingInteractorInputProtocol?, router: OnboardingRouterProtocol,state: OnboardingState) {
        self.view = view
        self.interactor = interactor
        self.router = router
        self.state = state
    }
    func loadDetails() {
        guard let view = view else {
            return
        }
        switch self.state {
        case .Categories:
            dataSource = LabelCollectionViewDataSource(collection: view.topicsCollections, models: AppTargetConstant.Countries, delegate: self)
            view.loadCountriesLayout()
            break
        case .Country:
            dataSource = LabelCollectionViewDataSource(collection: view.topicsCollections, models: AppTargetConstant.Countries, delegate: self)
            view.loadCountriesLayout()
            break
        }
    }
    
    func goToNextPage() {
        guard let dataSource = dataSource else {
            return
        }
        switch self.state {
        case .Categories:
            if let str = dataSource.selected.first {
                self.interactor?.saveCountry(code: str)
            }
            self.router.goToHome()
            break
        case .Country:
            self.interactor?.saveCategories(categories: dataSource.selected)
            self.router.goToNext()
            break
        }
    }
    
}

extension  OnboardingPresenter:LabelCollectionViewDataSourceActions{
    func didSelect(model: CountryModel) {
        
    }
}

extension OnboardingPresenter: OnboardingInteractorOutputProtocol {
    
}

enum OnboardingState {
    case Country , Categories
}
